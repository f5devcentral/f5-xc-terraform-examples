name: "Teachable 00-intro"

on:
  workflow_dispatch:
    inputs:
      lesson:
        description: 'Select Lesson to run'
        required: true
        default: 'terraform-cloud'
        type: choice
        options:
        - terraform-cloud
        - xc-credentials
        - azure-credentials
        - aws-credentials
        - destroy
      deployment_name:
        description: 'Deployment name'
        default: 'teachable-intro'
        required: true
        type: string

jobs:
  terraform_cloud:
    name: "Terraform Cloud"
    if: (inputs.lesson == 'destroy' || inputs.lesson == 'terraform-cloud' || inputs.lesson == 'xc-credentials' || inputs.lesson == 'azure-credentials' || inputs.lesson == 'aws-credentials')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./teachable/00-intro/terraform/terraform-cloud"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_HELLO_WORLD }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: inputs.lesson != 'destroy'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        id: destroy
        if: inputs.lesson == 'destroy'
        run: terraform destroy -auto-approve -input=false

  xc_credentials:
    name: "XC Credentials"
    if: (inputs.lesson == 'destroy' || inputs.lesson == 'xc-credentials' || inputs.lesson == 'azure-credentials' || inputs.lesson == 'aws-credentials')
    needs: terraform_cloud
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./teachable/00-intro/terraform/xc-credentials"
    env:
      TF_VAR_name: ${{ inputs.deployment_name }}
      TF_VAR_xc_api_url: ${{ secrets.XC_API_URL }}
      TF_VAR_xc_api_p12_file: "./api.p12"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          echo "${{secrets.P12}}" | base64 -d > api.p12

          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_XC_CREDENTIALS }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: inputs.lesson != 'destroy'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        id: destroy
        if: inputs.lesson == 'destroy'
        run: terraform destroy -auto-approve -input=false

  azure_credentials:
    name: "Azure Credentials"
    if: (inputs.lesson == 'destroy' || inputs.lesson == 'azure-credentials')
    needs: xc_credentials
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./shared/azure-credentials"
    env:
      TF_VAR_name: ${{ inputs.deployment_name }}
      TF_VAR_prefix: "azure"
      TF_VAR_xc_api_url: ${{ secrets.XC_API_URL }}
      TF_VAR_xc_api_p12_file: "./api.p12"
      TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_xc_azure_subscription_id: ${{ secrets.XC_AZURE_SUBSCRIPTION_ID }}
      TF_VAR_xc_azure_tenant_id: ${{ secrets.XC_AZURE_TENANT_ID }}
      TF_VAR_xc_azure_client_id: ${{ secrets.XC_AZURE_CLIENT_ID }}
      TF_VAR_xc_azure_client_secret: ${{ secrets.XC_AZURE_CLIENT_SECRET }}
      TF_VAR_azure_cloud_credentials_name : ${{ secrets.AZURE_CLOUD_CREDENTIALS_NAME }}
    outputs:
      azure_credentials_name: ${{ steps.vars.outputs.azure_credentials_name }}
      azure_credentials_namespace: ${{ steps.vars.outputs.azure_credentials_namespace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          echo "${{secrets.P12}}" | base64 -d > api.p12

          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS }}"
              }
            }
          }
          EOF
          
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: inputs.lesson != 'destroy'
        run: terraform apply -auto-approve -input=false

      - name: 'Set vars'
        id: vars
        if: inputs.lesson != 'destroy'
        run: |
          printf "azure_credentials_name=%s\n" $(terraform-bin output -raw name) >> "$GITHUB_OUTPUT"
          printf "azure_credentials_namespace=%s\n" $(terraform-bin output -raw namespace) >> "$GITHUB_OUTPUT"

      - name: Terraform Destroy
        id: destroy
        if: inputs.lesson == 'destroy'
        run: terraform destroy -auto-approve -input=false

  aws_credentials:
    name: "AWS Credentials"
    if: (inputs.lesson == 'destroy' || inputs.lesson == 'aws-credentials')
    needs: xc_credentials
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./shared/aws-credentials"
    env:
      TF_VAR_name: ${{ inputs.deployment_name }}
      TF_VAR_prefix: "aws"
      TF_VAR_xc_api_url: ${{ secrets.XC_API_URL }}
      TF_VAR_xc_api_p12_file: "./api.p12"
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_xc_aws_access_key: ${{ secrets.XC_AWS_ACCESS_KEY }}
      TF_VAR_xc_aws_secret_key: ${{ secrets.XC_AWS_SECRET_KEY }}
      TF_VAR_aws_cloud_credentials_name : ${{ secrets.AWS_CLOUD_CREDENTIALS_NAME }}
    outputs:
      aws_credentials_name: ${{ steps.vars.outputs.aws_credentials_name }}
      aws_credentials_namespace: ${{ steps.vars.outputs.aws_credentials_namespace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          echo "${{secrets.P12}}" | base64 -d > api.p12

          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_AWS_CREDENTIALS }}"
              }
            }
          }
          EOF
          
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: inputs.lesson != 'destroy'
        run: terraform apply -auto-approve -input=false

      - name: 'Set vars'
        id: vars
        if: inputs.lesson != 'destroy'
        run: |
          printf "aws_credentials_name=%s\n" $(terraform-bin output -raw name) >> "$GITHUB_OUTPUT"
          printf "aws_credentials_namespace=%s\n" $(terraform-bin output -raw namespace) >> "$GITHUB_OUTPUT"

      - name: Terraform Destroy
        id: destroy
        if: inputs.lesson == 'destroy'
        run: terraform destroy -auto-approve -input=false