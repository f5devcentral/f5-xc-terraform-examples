name: "Teachable 00-intro Apply"

on:
  workflow_dispatch:
    inputs:
      lesson:
        description: 'Select Lesson to run'
        required: true
        default: 'terraform-cloud'
        type: choice
        options:
        - terraform-cloud
        - xc-credentials
        - azure-credentials
        - aws-credentials
      TF_VAR_name:
        description: 'Deployment name'
        required: false
        type: string
        default: 'teachable'
      TF_VAR_prefix:
        description: "Prefix"
        required: false
        type: string
  workflow_call:
    inputs:
      lesson:
        description: 'Lesson to run'
        required: true
        type: string
      TF_VAR_name:
        required: false
        type: string
      TF_VAR_prefix:
        description: "Prefix"
        required: false
        type: string
      AWS_CLOUD_CREDENTIALS_TF_VAR_name:
        description: "AWS Cloud Credentials Workflow Name"
        required: false
        type: string
    secrets:
      TF_CLOUD_ORGANIZATION:
      TF_API_TOKEN:
      XC_API_URL:
      XC_P12_PASSWORD:
      XC_API_P12_FILE:
      AWS_ACCESS_KEY:
      AWS_SECRET_KEY:
      AWS_SESSION_TOKEN:
      XC_AWS_CLOUD_CREDENTIALS_NAME:
      AZURE_SUBSCRIPTION_ID:
      AZURE_TENANT_ID:
      AZURE_CLIENT_ID:
      AZURE_CLIENT_SECRET:
      XC_AZURE_CLOUD_CREDENTIALS_NAME:
    outputs:
      azure_credentials_name:
        description: "Azure XC Cloud Credentials Name"
        value: ${{ jobs.azure_credentials.outputs.azure_credentials_name }}
      azure_credentials_namespace:
        description: "Azure XC Cloud Credentials Namespace"
        value: ${{ jobs.azure_credentials.outputs.azure_credentials_namespace }}
      aws_credentials_name:
        description: "AWS XC Cloud Credentials Name"
        value: ${{ jobs.aws_credentials.outputs.aws_credentials_name }}
      aws_credentials_namespace:
        description: "AWS XC Cloud Credentials Namespace"
        value: ${{ jobs.aws_credentials.outputs.aws_credentials_namespace }}

jobs:
  terraform_cloud:
    name: "Terraform Cloud"
    if: (inputs.lesson == 'terraform-cloud' || inputs.lesson == 'xc-credentials' || inputs.lesson == 'aws-credentials' || inputs.lesson == 'azure-credentials')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./teachable/00-intro/terraform/terraform-cloud"
    env:
      TF_VAR_name: "teachable"
      TF_VAR_prefix: ""
      TF_CLOUD_WORKSPACE_HELLO_WORLD: "hello-world"
      TF_CLOUD_WORKSPACE_XC_CREDENTIALS: "xc-credentials"
      TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS: "azure-cloud-credentials"
      TF_CLOUD_WORKSPACE_AWS_CREDENTIALS: "aws-cloud-credentials"
      AWS_CLOUD_CREDENTIALS_TF_VAR_name: "aws-cloud-credentials"
      AZURE_CLOUD_CREDENTIALS_TF_VAR_name: "azure-cloud-credentials"
    outputs:
      TF_VAR_name: ${{ steps.update_output.outputs.TF_VAR_name }}
      TF_VAR_prefix: ${{ steps.update_output.outputs.TF_VAR_prefix }}
      TF_CLOUD_WORKSPACE_HELLO_WORLD: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_HELLO_WORLD }}
      TF_CLOUD_WORKSPACE_XC_CREDENTIALS: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_XC_CREDENTIALS }}
      TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS }}
      TF_CLOUD_WORKSPACE_AWS_CREDENTIALS: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AWS_CREDENTIALS }}
      AWS_CLOUD_CREDENTIALS_TF_VAR_name: ${{ steps.update_output.outputs.AWS_CLOUD_CREDENTIALS_TF_VAR_name }}
      AZURE_CLOUD_CREDENTIALS_TF_VAR_name: ${{ steps.update_output.outputs.AZURE_CLOUD_CREDENTIALS_TF_VAR_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: apply_variables 
        name: Apply Environment Variables
        uses: "./.github/actions/apply-variables" 
        with: 
          vars_json: "${{ toJSON(vars) }}" 
          vars_prefix: "T00_TF_VAR_"
          inputs_json: "${{ toJSON(inputs) }}" 

      - id: update_output
        name: Update Output
        shell: bash
        env:
          ALL_ENV: ${{ toJSON(env) }}
        run: |
          echo "$ALL_ENV" |
          jq -r ' 
              to_entries | 
              .[] | 
              select(.key) | 
              select(if .value | type == "string" then .value | length > 0 else .value != null end) | 
              "\(.key)=\(.value)" 
          ' >> "$GITHUB_OUTPUT" 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "$TF_CLOUD_WORKSPACE_HELLO_WORLD"
              }
            }
          }
          EOF

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -lock=false -auto-approve -input=false

  xc_credentials:
    name: "XC Credentials"
    if: (inputs.lesson == 'xc-credentials' || inputs.lesson == 'aws-credentials' || inputs.lesson == 'azure-credentials')
    needs: terraform_cloud
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./teachable/00-intro/terraform/xc-credentials"
    env:
      VOLT_API_URL: ${{ secrets.XC_API_URL }}
      VES_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      TF_CLOUD_WORKSPACE_XC_CREDENTIALS: ${{ needs.terraform_cloud.outputs.TF_CLOUD_WORKSPACE_XC_CREDENTIALS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          echo "${{secrets.XC_API_P12_FILE}}" | base64 -d > api.p12
          echo VOLT_API_P12_FILE="$PWD/api.p12" >> "$GITHUB_ENV"

          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "$TF_CLOUD_WORKSPACE_XC_CREDENTIALS"
              }
            }
          }
          EOF

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        run:  terraform apply -lock=false -auto-approve -input=false

  aws_credentials: 
    uses: ./.github/workflows/aws-cloud-credentials-apply.yaml
    if: (inputs.lesson == 'aws-credentials')
    needs: [xc_credentials, terraform_cloud]
    with: 
      TF_VAR_name: ${{ needs.terraform_cloud.outputs.AWS_CLOUD_CREDENTIALS_TF_VAR_name }} 
      TF_VAR_prefix: ${{ needs.terraform_cloud.outputs.TF_VAR_prefix }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      XC_API_P12_FILE: ${{ secrets.XC_API_P12_FILE }}
      XC_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      XC_API_URL: ${{ secrets.XC_API_URL }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }} 
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }} 
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
      XC_AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }} 
      XC_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }} 
      XC_AWS_CLOUD_CREDENTIALS_NAME: ${{ secrets.XC_AWS_CLOUD_CREDENTIALS_NAME }} 

  azure_credentials: 
    uses: ./.github/workflows/azure-cloud-credentials-apply.yaml 
    if: (inputs.lesson == 'azure-credentials')
    needs: [xc_credentials, terraform_cloud]
    with: 
      TF_VAR_name: ${{ needs.terraform_cloud.outputs.AZURE_CLOUD_CREDENTIALS_TF_VAR_name }} 
      TF_VAR_prefix: ${{ needs.terraform_cloud.outputs.TF_VAR_prefix }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      XC_API_P12_FILE: ${{ secrets.XC_API_P12_FILE }}
      XC_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      XC_API_URL: ${{ secrets.XC_API_URL }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      XC_AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      XC_AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      XC_AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      XC_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      XC_AZURE_CLOUD_CREDENTIALS_NAME: ${{ secrets.XC_AZURE_CLOUD_CREDENTIALS_NAME }}
