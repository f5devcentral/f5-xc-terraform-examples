name: "Teachable 01-mcn-networkconnect Destroy"

on:
  workflow_dispatch:
    inputs:
      TF_VAR_prefix:
        description: "Prefix"
        required: false
        type: string
  workflow_call:
    inputs:
      TF_VAR_prefix:
        description: "Prefix"
        required: false
        type: string
      AWS_CLOUD_CREDENTIALS_TF_VAR_name:
        description: "AWS Cloud Credentials Workflow Name"
        required: false
        type: string
    secrets:
      TF_CLOUD_ORGANIZATION:
      TF_API_TOKEN:
      XC_API_URL:
      XC_P12_PASSWORD:
      XC_API_P12_FILE:
      AWS_ACCESS_KEY:
      AWS_SECRET_KEY:
      AWS_SESSION_TOKEN:
      XC_AWS_CLOUD_CREDENTIALS_NAME:
      AZURE_SUBSCRIPTION_ID:
      AZURE_TENANT_ID:
      AZURE_CLIENT_ID:
      AZURE_CLIENT_SECRET:
      XC_AZURE_CLOUD_CREDENTIALS_NAME:

jobs:
  apply_variables:
    name: "Apply Environment Variables"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./teachable/01-mcn-networkconnect"
    env: 
      TF_CLOUD_WORKSPACE_AWS_CREDENTIALS: ""
      TF_CLOUD_WORKSPACE_AWS_NETWORKING: ""
      TF_CLOUD_WORKSPACE_AWS_VPC_SITE: ""
      TF_CLOUD_WORKSPACE_AZURE_NETWORKING: ""
      TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS: ""
      TF_CLOUD_WORKSPACE_AZURE_VNET_SITE: ""
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN: "teachable-01-mcn"
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW: "teachable-01-mcn-fw"
    outputs:
      TF_CLOUD_WORKSPACE_AWS_CREDENTIALS: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AWS_CREDENTIALS }}
      TF_CLOUD_WORKSPACE_AWS_NETWORKING: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AWS_NETWORKING }}
      TF_CLOUD_WORKSPACE_AWS_VPC_SITE: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AWS_VPC_SITE }}
      TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS }}
      TF_CLOUD_WORKSPACE_AZURE_NETWORKING: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AZURE_NETWORKING }}
      TF_CLOUD_WORKSPACE_AZURE_VNET_SITE: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_AZURE_VNET_SITE }}
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_TEACHABLE_MCN }}
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW: ${{ steps.update_output.outputs.TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - id: apply_variables 
        uses: "./.github/actions/apply-variables" 
        with: 
          vars_json: "${{ toJSON(vars) }}" 
          vars_prefix: "T01_TF_VAR_"
          inputs_json: "${{ toJSON(inputs) }}" 
        
      - name: update_output
        id: update_output
        shell: bash
        env:
          ALL_ENV: ${{ toJSON(env) }}
        run: |
          echo "$ALL_ENV" |
          jq -r ' 
              to_entries | 
              .[] | 
              select(.key) | 
              select(if .value | type == "string" then .value | length > 0 else .value != null end) | 
              "\(.key)=\(.value)" 
          ' >> "$GITHUB_OUTPUT" 

  workloads:
    name: "Global Network Workloads"
    runs-on: ubuntu-latest
    needs: [apply_variables]
    defaults:
      run:
        working-directory: "./teachable/01-mcn-networkconnect/terraform/global-network"
    env:
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_TEACHABLE_MCN }}
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      VOLT_API_URL: ${{ secrets.XC_API_URL }}
      VOLT_API_P12_FILE: "./api.p12"
      VES_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_name: "delete"
      TF_VAR_azure_inside_subnet_names: "[]"
      TF_VAR_azure_rg_location: "eastus"
      TF_VAR_azure_rg_name: "teachable-01-mcn"
      TF_VAR_azure_vnet_name: "teachable-01-mcn-vnet"
      TF_VAR_azure_vnet_cidr: "192.168.0.0/16"
      TF_VAR_aws_vpc_cidr: "192.168.0.0/16"
      TF_VAR_aws_workload_subnet_ids: "[\"delete-id\"]"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          echo "${{secrets.XC_API_P12_FILE}}" | base64 -d > api.p12
          echo VOLT_API_P12_FILE="$PWD/api.p12" >> "$GITHUB_ENV"

          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "$TF_CLOUD_WORKSPACE_TEACHABLE_MCN"
              }
            }
          }
          EOF
          
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false
        
  enhanced_firewall:
    name: "Enhanced Firewall"
    runs-on: ubuntu-latest
    needs: [apply_variables, aws_vpc_site]
    defaults:
      run:
        working-directory: "./teachable/01-mcn-networkconnect/terraform/enhanced-firewall"
    env:
      TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      VOLT_API_URL: ${{ secrets.XC_API_URL }}
      VOLT_API_P12_FILE: "./api.p12"
      VES_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          echo "${{secrets.XC_API_P12_FILE}}" | base64 -d > api.p12
          echo VOLT_API_P12_FILE="$PWD/api.p12" >> "$GITHUB_ENV"

          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "$TF_CLOUD_WORKSPACE_TEACHABLE_MCN_FW"
              }
            }
          }
          EOF
          
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -input=false

  aws_vpc_site: 
    uses: ./.github/workflows/aws-vpc-site-destroy.yaml 
    needs: [apply_variables, workloads]
    name: "AWS VPC Site"
    with: 
      TF_CLOUD_WORKSPACE_AWS_VPC_SITE: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_AWS_VPC_SITE }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      XC_API_P12_FILE: ${{ secrets.XC_API_P12_FILE }}
      XC_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      XC_API_URL: ${{ secrets.XC_API_URL }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }} 
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }} 
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
        
  aws_credentials: 
    uses: ./.github/workflows/aws-cloud-credentials-destroy.yaml 
    needs: [apply_variables, aws_vpc_site]
    name: "AWS Cloud Credentials"
    with: 
      TF_CLOUD_WORKSPACE_AWS_CREDENTIALS: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_AWS_CREDENTIALS }}
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
      XC_API_P12_FILE: ${{ secrets.XC_API_P12_FILE }}
      XC_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      XC_API_URL: ${{ secrets.XC_API_URL }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

  aws_networking: 
    uses: ./.github/workflows/aws-networking-destroy.yaml 
    needs: [apply_variables, aws_vpc_site]
    name: "AWS Networking"
    with:
      TF_CLOUD_WORKSPACE_AWS_NETWORKING: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_AWS_NETWORKING }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }} 
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }} 
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 

  azure_networking: 
    uses: ./.github/workflows/azure-networking-destroy.yaml 
    needs: [apply_variables, azure_vnet_site]
    name: "Azure Networking"
    with:
      TF_CLOUD_WORKSPACE_AZURE_NETWORKING: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_AZURE_NETWORKING }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

  azure_credentials: 
    uses: ./.github/workflows/azure-cloud-credentials-destroy.yaml 
    needs: [apply_variables, azure_vnet_site]
    name: "Azure Cloud Credentials"
    with: 
      TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_AZURE_CREDENTIALS }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      XC_API_P12_FILE: ${{ secrets.XC_API_P12_FILE }}
      XC_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      XC_API_URL: ${{ secrets.XC_API_URL }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

  azure_vnet_site: 
    uses: ./.github/workflows/azure-vnet-site-destroy.yaml 
    needs: [apply_variables, workloads]
    name: "Azure VNET Site"
    with: 
      TF_CLOUD_WORKSPACE_AZURE_VNET_SITE: ${{ needs.apply_variables.outputs.TF_CLOUD_WORKSPACE_AZURE_VNET_SITE }}
    secrets: 
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} 
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }} 
      XC_API_P12_FILE: ${{ secrets.XC_API_P12_FILE }}
      XC_P12_PASSWORD: ${{ secrets.XC_P12_PASSWORD }}
      XC_API_URL: ${{ secrets.XC_API_URL }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}